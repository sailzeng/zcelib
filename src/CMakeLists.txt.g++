# make VERBOSE = 1 显示所有编译命令

#cmake_minimum_required 需要的最小的版本
cmake_minimum_required(VERSION 3.16)

#如果没有指定则设置默认编译方式CMAKE_BUILD_TYPE
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
    #在命令行中输出message里的信息
    message("Setting build type to 'RelWithDebInfo' as none was specified.")
    #不管CACHE里有没有设置过CMAKE_BUILD_TYPE这个变量，都强制赋值这个值为RelWithDebInfo
    set(CMAKE_BUILD_TYPE RelWithDebInfo CACHE STRING "Choose the type of build." FORCE)
    # 当使用cmake-gui的时候，设置构建级别的3个可选项
    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Debug" "Release" "RelWithDebInfo")
endif()

#Linux 默认使用的编译文件是c++，也就是g++，C文件用gcc
set(CMAKE_C_COMPILER "gcc")
set(CMAKE_CXX_COMPILER "g++")

#
if(NOT CMAKE_GENERATOR )
    #在命令行中输出message里的信息
    message("Setting generator to 'MinGW Makefiles' as none was specified.")
    if(WIN32)
        MESSAGE(STATUS "Now is windows")
        # 
        set(CMAKE_GENERATOR "UNIX Makefiles" CACHE STRING "" FORCE)  
        
    ELSEIF (UNIX)
        MESSAGE(STATUS "Now is UNIX-like OS's.")
        #
        set(CMAKE_GENERATOR "Unix Makefiles" CACHE STRING "" FORCE)
    ENDIF ()
endif()

# set the project name
project(zceproject)

#Linux 默认使用的编译文件是c++，也就是g++，C文件用gcc
set(CMAKE_C_COMPILER "gcc")
set(CMAKE_CXX_COMPILER "g++")


message(STATUS "Others platform: ${CMAKE_SYSTEM_NAME}")

#根据平台决定产生的内容
if (CMAKE_SYSTEM_NAME MATCHES "Linux")
    set(CMAKE_GENERATOR "Unix Makefiles" CACHE STRING "" FORCE)
	message(STATUS "Current platform: Linux ,generate Unix Makefiles")
elseif (CMAKE_SYSTEM_NAME MATCHES "Windows")
    set(CMAKE_GENERATOR "MinGW Makefiles" CACHE STRING "" FORCE)
	message(STATUS "Current platform: Windows,generate MinGW Makefiles")
else ()
	
endif ()

message(STATUS "CMAKE_GENERATOR: ${CMAKE_GENERATOR}")

set(CMAKE_CONFIGURATION_TYPES "Debug;Release;RelWithAssert" CACHE STRING "" FORCE)
set(CMAKE_BUILD_TYPE "Debug"  CACHE STRING "" FORCE)

message(STATUS "CMAKE_SOURCE_DIR: ${CMAKE_SOURCE_DIR}")


set (ZCE_VERSION_MAJOR 2)
set (ZCE_VERSION_MINOR 0)

# configure_file用于拷贝
configure_file (
  "${CMAKE_SOURCE_DIR}/commlib/zcelib/zce/version.h.in"
  "${CMAKE_SOURCE_DIR}/commlib/zcelib/zce/version.h"
  )

#config 是大小写敏感的

if (NOT CMAKE_BUILD_TYPE)
    message(STATUS "CMAKE_BUILD_TYPE is None")
elseif (CMAKE_BUILD_TYPE MATCHES "Debug" )
    message(STATUS "CMAKE_BUILD_TYPE is Debug")
elseif (CMAKE_BUILD_TYPE MATCHES "Release")
    message(STATUS "CMAKE_BUILD_TYPE is Release")
else ()
    message(FATAL_ERROR "unknown CMAKE_BUILD_TYPE=" ${CMAKE_BUILD_TYPE}",Please check it.")
endif ()


set(CMAKE_DEBUG_POSTFIX "_d") 
set(CMAKE_RELEASE_POSTFIX "_r") 

#输出目录
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/../bin/ )
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/../bin/ )
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/../lib/ )
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${CMAKE_SOURCE_DIR}/../lib/debug/ )
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_REALSE ${CMAKE_SOURCE_DIR}/../lib/realse/ )


# C++标准
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED True)


#工程外部的头文件
set(PATH_THIRDPARTY_INC "../third_party/include/")
include_directories(${PATH_THIRDPARTY_INC}lualib-5.1.5/ )
include_directories(${PATH_THIRDPARTY_INC}protobuf-2.6.1/src/ )
include_directories(${PATH_THIRDPARTY_INC}sqlite-3.8.8.1/ )
include_directories(${PATH_THIRDPARTY_INC}mysql-linux-5.6.22/ )
include_directories(${PATH_THIRDPARTY_INC}rapidxml-1.13/ )

#默认都打开debuginfo,optimize，GCC这点和WINDOWS完全不一样

set(debuginfo "1" CACHE STRING "this is a comment of debuginfo")
set(optimize "1" CACHE STRING "this is a comment of optimize")
set(pipes "1" CACHE STRING "this is a comment of pipes")
set(threads "1" CACHE STRING "this is a comment of threads")
set(effcpp "0" CACHE BOOL "this is a comment of effcpp")


#编译选项,告警相关
add_compile_options(-W -Wall -Wpointer-arith -Winline -Wunreachable-code -Wshadow -Wcast-align)


# if 里面的变量不需要加${},CMake 不严谨
#-Werror 是告警为错误,我消灭了一半服务器的告警,所以我有权要求你也这样做,
if(rogue EQUAL 1)
else()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Werror" )
endif() 

if (effcpp EQUAL 1)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Weffc++" )
endif()

#-pipe用于加快编译速度，如果pipes被设置1打开-pipe,
#我自己的测试-pipe加快不了多少速度
if (pipes EQUAL 1)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pipe" )
endif()

#-ggdb这个调试开关打开后调试信息应该好于-g,但是不能使用其他调试器调试了
if (debuginfo EQUAL 1)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -ggdb")
endif()

if (optimize EQUAL 1)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O2" )
endif()

add_subdirectory(commlib/zcelib)
add_subdirectory(commlib/soarlib)
add_subdirectory(test/zealot)

